// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// schema.prisma

datasource db {
  provider = "postgresql"  // or "mysql" based on your database choice
  url      = env("DATABASE_URL") // URL to your PostgreSQL/MySQL database
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String       @id @default(uuid()) // Unique identifier for each user
  name      String    // User's name
  email     String    @unique // User's email (should be unique)
  password  String    // User's password (should be hashed)
  active    Boolean   @default(true)
  createdAt DateTime  @default(now()) // Created timestamp
  updatedAt DateTime  @updatedAt // Updated timestamp (auto-updated on change)
  
  warehouse    Warehouse[]   // One-to-many relationship with Store model (a user can have multiple stores)
}

model Product {
  id          String        @id @default(uuid()) // Product ID
  name        String      // Product name
  description String?     // Product description (optional)
  price       Int       // Product price
  createdAt   DateTime    @default(now()) // Created date
  updatedAt   DateTime    @updatedAt // Auto-updated on change
  inventory   Inventory[] // Relationship to inventory (many-to-many via inventory model)
}

model Warehouse {
  id          String        @id @default(uuid()) // Warehouse ID
  name        String      // Warehouse name
  location    Int     // Physical location (optional)
  createdAt   DateTime    @default(now()) // Created date
  updatedAt   DateTime    @updatedAt // Auto-updated on change
  inventory   Inventory[] // Relationship to inventory (many-to-many via inventory model)
  userId      String       // Foreign key to the User model
  user        User      @relation(fields: [userId], references: [id])
}

model Inventory {
  id          String         @id @default(uuid()) // Inventory record ID
  quantity    Int         // Quantity of the product in the warehouse
  minStock    Int         // Minimum stock level (for reorder alerts)
  productId   String         // Reference to Product model
  warehouseId String         // Reference to Warehouse model
  createdAt   DateTime    @default(now()) // Created date
  updatedAt   DateTime    @updatedAt // Auto-updated on change

  product     Product     @relation(fields: [productId], references: [id]) // Relationship to Product
  warehouse   Warehouse   @relation(fields: [warehouseId], references: [id]) // Relationship to Warehouse
}



